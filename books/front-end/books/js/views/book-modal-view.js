// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['models/base/model', 'views/base/modal-view', 'text!templates/book-modal.hbs'], function(Model, ModalView, template) {
    'use strict';
    var BookModalView;
    return BookModalView = (function(superClass) {
      extend(BookModalView, superClass);

      function BookModalView() {
        return BookModalView.__super__.constructor.apply(this, arguments);
      }

      BookModalView.prototype.template = template;

      template = null;

      BookModalView.prototype.autoRender = true;

      BookModalView.prototype.className = 'book-modal';

      BookModalView.prototype.events = {
        'click .close': 'remove',
        'click .accept': 'accept',
        'keydown input#price': 'checkPrice',
        'paste input#price': function() {
          return false;
        },
        'keydown': 'inputs'
      };

      BookModalView.prototype.initialize = function(options) {
        BookModalView.__super__.initialize.apply(this, arguments);
        this.callback = options.callback;
        return this.attributes = {
          title: options.title,
          book: options.bookAttributes
        };
      };

      BookModalView.prototype.accept = function() {
        var book;
        book = {
          name: $(this.el).find('input#name').val(),
          title: $(this.el).find('input#title').val(),
          author: $(this.el).find('input#author').val(),
          description: $(this.el).find('textarea#description').val(),
          price: $(this.el).find('input#price').val()
        };
        if (!(book.name.length > 0 && book.author.length > 0 && book.price.length > 0)) {
          return;
        }
        this.callback(book);
        return this.remove();
      };

      BookModalView.prototype.inputs = function(event) {
        if (event.keyCode === 13) {
          this.accept();
          return;
        }
        if (event.keyCode === 27) {
          this.remove();
        }
      };

      BookModalView.prototype.checkPrice = function(event) {
        var c;
        c = event.keyCode;
        if (c === 46 || c === 8 || c === 9 || c === 27 || c === 110) {
          return true;
        }
        if (!((c >= 48 && c <= 57) || (c >= 96 && c <= 105))) {
          return false;
        }
        if (!($(this.el).find('input#price').val().length <= 5)) {
          return false;
        }
      };

      BookModalView.prototype.getTemplateData = function() {
        return this.attributes;
      };

      return BookModalView;

    })(ModalView);
  });

}).call(this);
